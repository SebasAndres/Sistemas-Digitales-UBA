[0] Interpretacion del codigo RISCV:

li a0,4228                      # 1      | a0=4228
li a1,2114                      # 2      | a1=2114
jal ra,resta                    # 3      | Salta a la etiqueta 'resta' y guarda la dirección de retorno ('fin') en ra
fin: beq zero, zero, fin        # 17     | Bucle infinito en 'fin'
resta:                            
prologo: addi sp, sp, -4        # 4 y 9  | Ajusta el puntero de pila hacia abajo (reserva espacio en la pila)
    sw ra,0(sp)                 # 5 y 10 | Guarda el ra (return adress) en la memoria/stack
    sub a0,a0,a1                # 6 y 11 | a0 = a0 - a1
    beq a0,zero,epilogo         # 7 y 12 | Si a0==0 --> salta a "epilogo" else "sigo"
sigo: jal ra,resta              # 8      | Salta a 'resta' (ahora a0=2114) y guarda la dirección de retorno en ra
epilogo:                        # 13   
    lw ra,0(sp)                 # 14     | Restaura el valor de ra desde la memoria
    addi sp,sp,4                # 15     | sp += 4
    ret                         # 16     | retorna de la subrutina


[a] Indicar posiciones de memoria de cada etiqueta.

0:        00001537        lui x10 0x1
4:        08450513        addi x10 x10 132
8:        000015b7        lui x11 0x1
c:        84258593        addi x11 x11 -1982
10:        008000ef        jal x1 8 <resta>

00000014 <fin>:
    14:        00000063        beq x0 x0 0 <fin>

00000018 <resta>:
    18:        ffc10113        addi x2 x2 -4
    1c:        00112023        sw x1 0 x2
    20:        40b50533        sub x10 x10 x11
    24:        00050463        beq x10 x0 8 <epilogo>

00000028 <sigo>:
    28:        ff1ff0ef        jal x1 -16 <resta>

0000002c <epilogo>:
    2c:        00012083        lw x1 0 x2
    30:        00410113        addi x2 x2 4
    34:        00008067        jalr x0 x1 0

[b] Indicar el desplazamiento de las llamadas a etiquetas

0:        00001537        lui x10 0x1
4:        08450513        addi x10 x10 132
8:        000015b7        lui x11 0x1
c:        84258593        addi x11 x11 -1982
10:       008000ef        jal x1 8 <resta>

00000014 <fin>:
    14:        00000063        beq x0 x0 0 <fin>

00000018 <resta>:
    18:        ffc10113        addi x2 x2 -4
    1c:        00112023        sw x1 0 x2
    20:        40b50533        sub x10 x10 x11
    24:        00050463        beq x10 x0 8 <epilogo>

00000028 <sigo>:
    28:        ff1ff0ef        jal x1 -16 <resta>

0000002c <epilogo>:
    2c:        00012083        lw x1 0 x2
    30:        00410113        addi x2 x2 4
    34:        00008067        jalr x0 x1 0

(00000014) estas posiciones de memoria de las etiquetas apuntan a bytes, por eso 
sumarle 8 a una posicion de memoria representa 32 bits mas.

[c] Indique el rango de constantes, en decimal y binario que pueden utilizarse en la instruccion LI.
¿Coinciden con el rango del imm de la instruccion ADDI?

- La pseudo-instrucción LI, al igual que ADDI, tiene 12 bits asignados con signo para el imm (-2048 a 2047).
  De hecho, LI se traduce a una instruccion ADDI o ADDI y LUI (segun si esta en rango). 

[d] ¿Como resuelve los valores inmediatos que no son representables en 12 bits C2?

Si el valor a representar esta dentro del rango (-2048 a 2047):
    Se descompone como una instruccion ADDI    
Sino:
    Se descompone en una o mas instrucciones adecuadas...

    Por ejemplo:
    Si queremos cargar en t0 el numero 74565 (0x12345),
    se traduce "li t0 0x12345" como:     

    lui t0, 0x12    # Carga los 20 bits superiores, esto coloca el valor 0x12 en los bits superiores del registro, resultando en 0x12000.
    addi t0, t0, 0x345  # Ajusta los 12 bits inferiores

    Esto funciona tanto si el numero esta por debajo o por arriba del rango de 12 bits.

[e] El valor final de a1 es 2114

[f] El valor final del PC es 0x0C (la etiqueta fin)

[g] La secuencia descripta por el PC (ver comentarios flujo de ejecucion)

[h] Indicar valores de ra (register adress) y sp (stack pointer) al inicio, durante y fin de ejecucion.

En general:
sp (Stack Pointer): Apunta al tope de la pila y se utiliza para manejar el almacenamiento temporal de datos y direcciones de retorno.
ra (Return Address): Almacena la dirección de retorno cuando se llama a una subrutina, permitiendo que la subrutina retorne 
                     correctamente al punto de llamada.

Inicio:
- ra: 0x00000000
- sp: 0x7ffffff0

Durante:

10: 
	ra: 0x00000014
	sp: igual

17: 
	ra: 0x00000014
	sp: 0x7fffffec


28:
   	ra: 0x000002c
	sp: 0x7fffffec

 
1C: 	
	sp: 0x7fffffe8
	
34:    
	ra: 0x0000002c -- primer iteracion
	ra: 0x00000014 -- segunda


Fin Ejecucion:
- ra: Tiene la direccion de la instruccion `fin` manteniendo el programa en un bucle infinito
- sp: Vuelve a su valor original, 0x8000.

[i] Reemplazar la segunda instruccion li a1,1023 de modo que a1 sea a0 dividido 2 con una unica instruccion.

li a0,4228                      
srai a1, a0, 1   # shift right arithmetic immediate por un bit ~ dividir por 2 a0 y guardarlo en a1                
jal ra,resta                   
fin: beq zero, zero, fin       
resta:                          
prologo: addi sp, sp, -4        
    sw ra,0(sp)                  
    sub a0,a0,a1                
    beq a0,zero,epilogo         
sigo: jal ra,resta              
epilogo:                        
    lw ra,0(sp)                 
    addi sp,sp,4                
    ret                         